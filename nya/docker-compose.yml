services:
  builder:
    image: rust:latest
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   args:
    #     TARGET: ${TARGET}
    #     TAG: ${DOCKER_IMAGE_TAG}
    volumes:
      - ../:/code
      - cargo:/root/.cargo/
      - cargo_release:/tmp/target/
      - ./build.sh:/home/build.sh
    command: sh /home/build.sh
    environment:
      SOURCE_DIR: ${SOURCE_DIR}
      TARGET: ${TARGET}
      OUTPUT_NAME: ${OUTPUT_NAME}
      CARGO_TARGET_DIR: /tmp/target
      RUSTFLAGS: "-C target-feature=-crt-static"
    healthcheck:
      test: 'file /tmp/target/${TARGET}/release/libnss_${OUTPUT_NAME}.so'
      interval: 1s
      timeout: 1s
      retries: 10
  ubuntu:
    image: ubuntu:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      TARGET: ${TARGET}
      SO_NAME: ${OUTPUT_NAME}
      NSS_HTTP_API_ENDPOINT: "https://shizuku-bastion.satori.workers.dev"
      NSS_HTTP_API_DEBUG: "true"
    ports:
      - "2222:22"
    volumes:
      - cargo_release:/release
      - ./deploy.sh:/home/deploy.sh
      - ./test.c/:/home/test.c
      - ./sshd_config:/etc/ssh/sshd_config
      - ~/.ssh/id_rsa.pub:/tmp/authorized_keys
    command: bash /home/deploy.sh
    depends_on:
      builder:
        condition: service_completed_successfully
  # debian:
  #   image: debian:latest
  #   environment:
  #     TARGET: ${TARGET}
  #     SO_NAME: ${OUTPUT_NAME}
  #   volumes:
  #     - cargo_release:/release
  #     - ./deploy.sh:/home/deploy.sh
  #   command: bash /home/deploy.sh
  #   depends_on:
  #     builder:
  #       condition: service_completed_successfully
  # centos:
  #   image: centos:latest
  #   environment:
  #     TARGET: ${TARGET}
  #     SO_NAME: ${OUTPUT_NAME}
  #   volumes:
  #     - cargo_release:/release
  #     - ./deploy.sh:/home/deploy.sh
  #   command: bash /home/deploy.sh
  #   depends_on:
  #     builder:
  #       condition: service_completed_successfully
  # fedora:
  #   image: fedora:latest
  #   environment:
  #     TARGET: ${TARGET}
  #     SO_NAME: ${OUTPUT_NAME}
  #   volumes:
  #     - cargo_release:/release
  #     - ./deploy.sh:/home/deploy.sh
  #   command: bash /home/deploy.sh
  #   depends_on:
  #     builder:
  #       condition: service_completed_successfully
  # opensuse:
  #   container_name: nya-opensuse
  #   image: opensuse/leap
  #   environment:
  #     TARGET: ${TARGET}
  #     SO_NAME: ${OUTPUT_NAME}
  #   volumes:
  #     - cargo_release:/release
  #     - ./deploy.sh:/home/deploy.sh
  #   command: bash /home/deploy.sh
  #   depends_on:
  #     builder:
  #       condition: service_completed_successfully
volumes:
  cargo: {}
  cargo_release: {}